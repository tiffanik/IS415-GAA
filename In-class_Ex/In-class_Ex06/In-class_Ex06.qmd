---
title: "In-class Exercise 6: Spatial Weights sfdep methods"
author : "NGUYEN MAI PHHUONG"
format :
  html:
    fontsize: 24px 
execute:
  echo: true 
  eval: true 
  warning: false 
editor: visual
---

# 1 Importing 

```{r}
pacman::p_load(sf,tmap,sfdep, tidyverse, spdep)
```

INSERT IMG

# 2 The Data

For the purpose of this in-class exercise, the Hunan data sets will be used.

There are two data sets in this use case, they are:

1.  ﻿﻿Hunan, a geospatial data set in ESRI shapefile format, and

2.  ﻿﻿Hunan_2012, an attribute data set in csv format.

### 2.1 Aspatial

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")

```

### 2.2 Geospatial

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### 2.3 Performing relational join

LEFT = sf df

RIGHT = tpler df

```{r}
hunan_GDPPC <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# 3 Visualising Regional Development Indicator

```{r}
tmap_mode("plot")
tm_shape (hunan_GDPPC) + 
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDPPC") +
tm_layout ( main.title = "Distribution of GDP per capita by distribution",
            main.title.position = "left",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
tm_borders (alpha = 0.5) +
tm_compass (type="8star", size = 2) +
tm_scale_bar() + 
tm_grid(alpha =0.2)

```

### 
3.1 Contiguity neighbours method

In the code chunk below st_contiguity() is used to derive a contiguity neighbour list by using Queen's method.

```{r}
cn_queen <- hunan_GDPPC %>%

mutate(nb = st_contiguity (geometry),

.before = 1)



```

With the below method then the above is redundant

rook method

c_rook \< - hunan_GDPPC %\>%

mutate(nb = st_contiguity (geometry),

queen = FALSE,

.before = 1)

```{r}
wm_q <- hunan_GDPPC %>%
mutate(nb = st_contiguity (geometry),
        wt = st_weights (nb),
.before = 1)
```

```{r}
wm_q <- poly2nb(hunan_GDPPC, queen=TRUE)
summary(wm_q)
```

```{r}
wm_q[[1]]
```

```{r}
hunan_GDPPC$County[1]
```

```{r}
hunan_GDPPC$NAME_3[c(2,3,4,57,85)]
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan_GDPPC$GDPPC[nb1]
nb1
```

```{r}
str(wm_q)
```

### 3.2 Creating (ROOK) contiguity based neighbours

```{r}
wm_r <- poly2nb(hunan_GDPPC, queen=FALSE)
summary(wm_r)
```

### 3.3 Visualising contiguity weights

```{r}

longitude <- map_dbl(hunan_GDPPC$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan_GDPPC$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

3.3.1Plotting Queen contiguity based neighbours map

```{r}
plot(hunan_GDPPC$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

3.3.2 Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

3.3.4 Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```
